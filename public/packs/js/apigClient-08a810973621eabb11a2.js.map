{"version":3,"file":"js/apigClient-08a810973621eabb11a2.js","sources":["webpack:///webpack/bootstrap","webpack:///./app/javascript/packs/apigClient.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/javascript/packs/apigClient.js\");\n","/*\n * Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\nvar apigClientFactory = {};\napigClientFactory.newClient = function (config) {\n    var apigClient = { };\n    if(config === undefined) {\n        config = {\n            accessKey: '',\n            secretKey: '',\n            sessionToken: '',\n            region: '',\n            apiKey: undefined,\n            defaultContentType: 'application/json',\n            defaultAcceptType: 'application/json'\n        };\n    }\n    if(config.accessKey === undefined) {\n        config.accessKey = '';\n    }\n    if(config.secretKey === undefined) {\n        config.secretKey = '';\n    }\n    if(config.apiKey === undefined) {\n        config.apiKey = '';\n    }\n    if(config.sessionToken === undefined) {\n        config.sessionToken = '';\n    }\n    if(config.region === undefined) {\n        config.region = 'us-east-1';\n    }\n    //If defaultContentType is not defined then default to application/json\n    if(config.defaultContentType === undefined) {\n        config.defaultContentType = 'application/json';\n    }\n    //If defaultAcceptType is not defined then default to application/json\n    if(config.defaultAcceptType === undefined) {\n        config.defaultAcceptType = 'application/json';\n    }\n\n    \n    // extract endpoint and path from url\n    var invokeUrl = 'https://i9umv18cjj.execute-api.us-east-1.amazonaws.com/v2';\n    var endpoint = /(^https?:\\/\\/[^\\/]+)/g.exec(invokeUrl)[1];\n    var pathComponent = invokeUrl.substring(endpoint.length);\n\n    var sigV4ClientConfig = {\n        accessKey: config.accessKey,\n        secretKey: config.secretKey,\n        sessionToken: config.sessionToken,\n        serviceName: 'execute-api',\n        region: config.region,\n        endpoint: endpoint,\n        defaultContentType: config.defaultContentType,\n        defaultAcceptType: config.defaultAcceptType\n    };\n\n    var authType = 'NONE';\n    if (sigV4ClientConfig.accessKey !== undefined && sigV4ClientConfig.accessKey !== '' && sigV4ClientConfig.secretKey !== undefined && sigV4ClientConfig.secretKey !== '') {\n        authType = 'AWS_IAM';\n    }\n\n    var simpleHttpClientConfig = {\n        endpoint: endpoint,\n        defaultContentType: config.defaultContentType,\n        defaultAcceptType: config.defaultAcceptType\n    };\n\n    var apiGatewayClient = apiGateway.core.apiGatewayClientFactory.newClient(simpleHttpClientConfig, sigV4ClientConfig);\n    \n    \n    \n    apigClient.configsGet = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, ['x-pcbuilder-token'], ['body']);\n        \n        var configsGetRequest = {\n            verb: 'get'.toUpperCase(),\n            path: pathComponent + uritemplate('/configs').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, ['x-pcbuilder-token']),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(configsGetRequest, authType, additionalParams, config.apiKey);\n    };\n    \n    \n    apigClient.configsOptions = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, [], ['body']);\n        \n        var configsOptionsRequest = {\n            verb: 'options'.toUpperCase(),\n            path: pathComponent + uritemplate('/configs').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, []),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(configsOptionsRequest, authType, additionalParams, config.apiKey);\n    };\n    \n    \n    apigClient.configsConfigIdGet = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, ['config_id', 'x-pcbuilder-token'], ['body']);\n        \n        var configsConfigIdGetRequest = {\n            verb: 'get'.toUpperCase(),\n            path: pathComponent + uritemplate('/configs/{config_id}').expand(apiGateway.core.utils.parseParametersToObject(params, ['config_id', ])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, ['x-pcbuilder-token']),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(configsConfigIdGetRequest, authType, additionalParams, config.apiKey);\n    };\n    \n    \n    apigClient.configsConfigIdPut = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, ['config_id', 'x-pcbuilder-token', 'body'], ['body']);\n        \n        var configsConfigIdPutRequest = {\n            verb: 'put'.toUpperCase(),\n            path: pathComponent + uritemplate('/configs/{config_id}').expand(apiGateway.core.utils.parseParametersToObject(params, ['config_id', ])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, ['x-pcbuilder-token', ]),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(configsConfigIdPutRequest, authType, additionalParams, config.apiKey);\n    };\n    \n    \n    apigClient.configsConfigIdOptions = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, ['config_id'], ['body']);\n        \n        var configsConfigIdOptionsRequest = {\n            verb: 'options'.toUpperCase(),\n            path: pathComponent + uritemplate('/configs/{config_id}').expand(apiGateway.core.utils.parseParametersToObject(params, ['config_id'])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, []),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(configsConfigIdOptionsRequest, authType, additionalParams, config.apiKey);\n    };\n    \n    \n    apigClient.hotConfigGet = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, [], ['body']);\n        \n        var hotConfigGetRequest = {\n            verb: 'get'.toUpperCase(),\n            path: pathComponent + uritemplate('/hot-config').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, []),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(hotConfigGetRequest, authType, additionalParams, config.apiKey);\n    };\n    \n    \n    apigClient.hotConfigOptions = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, [], ['body']);\n        \n        var hotConfigOptionsRequest = {\n            verb: 'options'.toUpperCase(),\n            path: pathComponent + uritemplate('/hot-config').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, []),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(hotConfigOptionsRequest, authType, additionalParams, config.apiKey);\n    };\n    \n    \n    apigClient.recommendGet = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, ['budget', 'level', 'email'], ['body']);\n        \n        var recommendGetRequest = {\n            verb: 'get'.toUpperCase(),\n            path: pathComponent + uritemplate('/recommend').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, []),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, ['budget', 'level', 'email']),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(recommendGetRequest, authType, additionalParams, config.apiKey);\n    };\n    \n    \n    apigClient.recommendPost = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, ['body'], ['body']);\n        \n        var recommendPostRequest = {\n            verb: 'post'.toUpperCase(),\n            path: pathComponent + uritemplate('/recommend').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, []),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(recommendPostRequest, authType, additionalParams, config.apiKey);\n    };\n    \n    \n    apigClient.recommendOptions = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, [], ['body']);\n        \n        var recommendOptionsRequest = {\n            verb: 'options'.toUpperCase(),\n            path: pathComponent + uritemplate('/recommend').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, []),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(recommendOptionsRequest, authType, additionalParams, config.apiKey);\n    };\n    \n\n    return apigClient;\n};\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}